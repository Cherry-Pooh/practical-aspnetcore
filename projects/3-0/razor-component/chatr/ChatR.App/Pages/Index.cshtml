@page "/"
@inject NotificationService Notification

<h1>SignalR Broadcast</h1>

<ul>
    <li>
        <a href="/" target="new">Open another window</a>
    </li>
    <li>
        Click Connect
    </li>
    <li>
        Enter Name and Broadcast Message. Both screens will receive the broadcasts. 
        For now you have to press the "Refresh" button to see the broadcast. Yeah it's stupid but the UI won't update by itself
        currently although the data is already received.
    </li>
</ul>

<div class="alert alert-warning">
    @Log
</div>

<div class="alert alert-info">
    @Message
</div>

<button onclick="@ConnectAsync">Connect</button>
<br/><br/>
<label>Username</label>
<input class="form-control" type="text" bind="@Sender" placeholder="Enter username" />
<br/>
<label>Broadcast Message</label>
<textarea class="form-control" bind="@BroadcastMessage" placeholder="Enter Broadcast Message"></textarea>
<button onclick="@BroadcastAsync">Broadcast</button>

<button onclick="@Refresh">Refresh</button>
@functions
{
    string Message { get;set;}
    string Log { get;set;}

    string Sender { get;set;}
    string BroadcastMessage { get;set;}

    protected override void OnInit()
    {
        Notification.OnMessage = (string user, string message) =>
        {
            Message = $"{user} broadcasts \"{message}\"";
            this.StateHasChanged();
        };
    }

    void Refresh()
    {
        Log = "Refresh Screen";
    }

    async Task ConnectAsync()
    {
        Log = "Trying to connect";
        await Notification.ConnectAsync();
    }

    async Task BroadcastAsync()
    {
        Log = "Broadcast";
        await Notification.BroadcastAsync(Sender, BroadcastMessage);
    }
}
